 public void GatherData()
        {
            int i = 0;
            int j = 0;
            int k = 0;
            int t = 0;

            //   Socket server;
            // ip = new IPEndPoint(IPAddress.Parse(ip_txt.Text.Trim()), 24105);
            //定义网络类型，数据连接类型和网络协议UDP

            string temp1 = IPAddressInput1;
            while (true)
            {
                
                PR = 0; pr_effective = false;    //脉率
                RR = 0; rr_effective = false;    //呼吸频率
                SPO2 = 0; spo2_effective = false;//血氧饱和度
                TEMP = 0; temp_effective = false;//温度
                HR = 0; hr_effective = false;    //心率
                SYS = 0; sys_effective = false; //收缩压
                DIA = 0; dia_effective = false; //舒张压
                MAP = 0; map_effective = false; //平均血压
                CVP_SYS = 0; CVP_sys_effective = false; //中心静脉收缩压
                CVP_DIA = 0; CVP_dia_effective = false; //中心静脉舒张压
                CVP_MAP = 0; CVP_map_effective = false; //中心静脉平均血压
                ABP_SYS = 0; ABP_sys_effective = false; //动脉收缩压
                ABP_DIA = 0; ABP_dia_effective = false; //动脉舒张压
                ABP_MAP = 0; ABP_map_effective = false; //动脉平均血压


                MeasureDate = System.DateTime.Now;


                setText d = new setText(DisplayAllData);
                this.Invoke(d);


                string logstr;
                int recv_Length = 0;
                /* recv_Length = server.ReceiveFrom(recv_Data,ref phillip);

                  if (recv_Length > 0) MessageBox.Show("indication message is received");*/

                string response_str = "";
                Byte[] AssocReq = new Byte[]                   //AssocReq
            {
             0x0D,0xEC,                                   //SessionHeader  
             0x05,0x08,0x13,0x01,0x00,0x16,0x01,0x02,     //SessionData
             0x80,0x00,0x14,0x02,0x00,0x02,


             0xC1,0xDC,0x31,0x80,0xA0,0x80,0x80,0x01,     //PresentationHeader
             0x01,0x00,0x00,0xA2,0x80,0xA0,0x03,0x00,
             0x00,0x01,0xA4,0x80,0x30,0x80,0x02,0x01,
             0x01,0x06,0x04,0x52,0x01,0x00,0x01,0x30,
             0x80,0x06,0x02,0x51,0x01,0x00,0x00,0x00,
             0x00,0x30,0x80,0x02,0x01,0x02,0x06,0x0C,
             0x2A,0x86,0x48,0xCE,0x14,0x02,0x01,0x00,
             0x00,0x00,0x01,0x01,0x30,0x80,0x06,0x0C,
             0x2A,0x86,0x48,0xCE,0x14,0x02,0x01,0x00,
             0x00,0x00,0x02,0x01,0x00,0x00,0x00,0x00,
             0x00,0x00,0x61,0x80,0x30,0x80,0x02,0x01,
             0x01,0xA0,0x80,0x60,0x80,0xA1,0x80,0x06,
             0x0C,0x2A,0x86,0x48,0xCE,0x14,0x02,0x01,
             0x00,0x00,0x00,0x03,0x01,0x00,0x00,0xBE,
             0x80,0x28,0x80,0x06,0x0C,0x2A,0x86,0x48,
             0xCE,0x14,0x02,0x01,0x00,0x00,0x00,0x01,
             0x01,0x02,0x01,0x02,0x81,


             0x48,                                        //AssocReqUserData
             0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,
             0x20,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,
             0x00,0x01,0x00,0x2c,
             0x00,0x01,0x00,0x28,
             0x80,0x00,0x00,0x00,0x00,0x00,0x09,0xc4,
             0x00,0x00,0x09,0xc4,0x00,0x00,0x03,0xe8,
             0xff,0xff,0xff,0xff,0x60,0x00,0x00,0x00,
             0x00,0x01,0x00,0x0c,
             0xf0,0x01,0x00,0x08,
             0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  //0x20 表示每60秒应答一次 0x80表示每秒应答一次。 

          
             0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,   //PresentationTrailer
             0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
             };


                server.SendTo(AssocReq, 237, SocketFlags.None, phillip_server);
                logstr = "Send Association Request : " + MeasureDate.ToString("yyyy-MM-dd HH:mm:ss") + "\r\n" + BitConverter.ToString(AssocReq).Replace("-", ",0x");

                //Thread.Sleep(Waiting_Period);

                SaveLog(logstr);

                recv_Length = 0;
                recv_Length = server.ReceiveFrom(recv_Data, ref phillip);

                logstr = "Received Association Result: " + BitConverter.ToString(recv_Data, 0, recv_Length).Replace("-", ",0x");
                SaveLog(logstr);
                if (recv_Length > 0)
                {
                    if (recv_Data[0] == 0x0E)  // MessageBox.Show("收到联系响应报文！");
                    {

                        for (i = 0; i < recv_Length; i++)
                        {
                            response_str += recv_Data[i].ToString();
                            response_str += " ";

                        }
                        //   response_txt.Text = response_str;
                        recv_Length = server.ReceiveFrom(recv_Data, ref phillip);// 接收 MDS CREATE EVENT 
                        logstr = "Received MSD Create Event Report : " + BitConverter.ToString(recv_Data, 0, recv_Length).Replace("-", ",0x");
                        SaveLog(logstr);


                        if (recv_Length > 0)
                        {
                            //   MessageBox.Show("收到事件报文！");
                            response_str = "";
                            for (i = 0; i < recv_Length; i++)
                            {
                                response_str += recv_Data[i].ToString();
                                response_str += " ";

                            }
                            //eveReasult_txt.Text = response_str;
                        }
                        Byte[] event_result = new Byte[]
                    {
                        0xE1,0x00,0x00,0x02,
                        0x00,0x02,0x00,0x14,
                        0x00,0x01,0x00,0x01,0x00,0x0e,
                        0x00,0x21,0x00,0x00,0x00,0x00,0x00,0x48,
                        0x47,0x00,0x0d,0x06,0x00,0x00
                    };
                        server.SendTo(event_result, 28, SocketFlags.None, phillip_server);
                        logstr = "Send MSD Create Event Result: " + BitConverter.ToString(event_result).Replace("-", ",0x");
                        SaveLog(logstr);

                        Thread.Sleep(1000);
                        


                    }
                    if (recv_Data[0] == 0x0C) MessageBox.Show("收到拒绝联系报文！");
                    if (recv_Data[0] == 0x19) MessageBox.Show("收到丢弃联系报文！");
                }

                Byte[] single_poll_exs = new Byte[]
             {
                 0xE1,0x00,0x00,0x02,
                 0x00,0x01,0x00,0x20,
                 0x00,0x01,0x00,0x07,0x00,0x1a,
                 0x00,0x21,0x00,0x00,0x00,0x00,0x00,0x00,
                 0x00,0x00,0xf1,0x3b,0x00,0x0c,
                 0x00,0x01,0x00,0x01,0x00,0x06,0x08,0x03,
                 0x00,0x00,0x00,0x00
              };
                /*   Byte[] single_pool_data_request =new Byte[]
                   {
                     0xE1, 0x00, 0x00, 0x02,
                     0x00, 0x01, 0x00, 0x1c,
                     0x00, 0x01, 0x00, 0x07, 0x00, 0x16,
                     0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x0c, 0x16, 0x00, 0x08,
                     0x00, 0x01, 0x00, 0x01, 0x00, 0x06, 0x08,0x03  //0x08, 0x03 是 polled_attr_grp， 选择NOM_ATTR_GRP_METRIC_VAL_OBS 0x0803
                   }; */
                int count1 = 0;
                int count2 = 0;
                int count3 = 0;
                int count4 = 0;

                int contemp1 = 0;
                int contemp2 = 0;
                int contemp3 = 0;
                int contemp4 = 0;
                int contemp5 = 0;
                int physio_id = 0;

                //要采集的数据




                LoopCount = 0;
                HasEffectiveData = false;
                // while (true)
                while (LoopCount < MAX_TRY_TIMES && !HasEffectiveData)
                {
                    LoopCount++;
                    Thread.Sleep(500);
                    server.SendTo(single_poll_exs, 40, SocketFlags.None, phillip_server);
                    logstr = "Send single pool ext: " + BitConverter.ToString(single_poll_exs).Replace("-", ",0x");
                    SaveLog(logstr);
                    //Thread.Sleep(1000);
                    recv_Length = server.ReceiveFrom(recv_Data, ref phillip);
                    logstr = "Received single pool ext response1: " + BitConverter.ToString(recv_Data, 0, recv_Length).Replace("-", ",0x");
                    SaveLog(logstr);
                    //处理第一个消息， 该消息是一个ROLRS_APDU消息
                    if ((recv_Length > 0) && (recv_Data[4] == 0x00) && (recv_Data[5] == 0x02))
                    {
                        // Pillin new code
                        int Fieldposition = 0;
                        //PR 0x4822
                        Fieldposition = FindField(recv_Data, 0x48, 0x22);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            pr_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (pr_effective)
                                PR = (int)getFloat(recv_Data, Fieldposition + 6);
                        }
                        //RR 0x500A
                        Fieldposition = FindField(recv_Data, 0x50, 0x0A);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            rr_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (rr_effective)
                                RR = (int)getFloat(recv_Data, Fieldposition + 6);
                        }
                        //awRR 0x5012
                        Fieldposition = FindField(recv_Data, 0x50, 0x12);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            awrr_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (awrr_effective)
                                awRR = (int)getFloat(recv_Data, Fieldposition + 6);
                        }
                        //PACO2 0x7008
                        Fieldposition = FindField(recv_Data, 0x70, 0x08);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            etco2_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (etco2_effective)
                                ETCO2 = (int)getFloat(recv_Data, Fieldposition + 6);
                        }

                        //SPO2 0x4BB8
                        Fieldposition = FindField(recv_Data, 0x4B, 0xB8);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            spo2_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (spo2_effective)
                                SPO2 = (int)getFloat(recv_Data, Fieldposition + 6);
                        }
                        //TEMP 0x4B60
                        Fieldposition = FindField(recv_Data, 0x4B, 0x60);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            temp_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (temp_effective)
                                TEMP = (int)getFloat(recv_Data, Fieldposition + 6);
                        }
                        //HR 0x4182
                        Fieldposition = FindField(recv_Data, 0x41, 0x82);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            hr_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (hr_effective)
                                HR = (int)getFloat(recv_Data, Fieldposition + 6);
                        }

                        //NBP SYS 0x4A05
                        Fieldposition = FindField(recv_Data, 0x4A, 0x05);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            sys_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (sys_effective)
                                SYS = (int)getFloat(recv_Data, Fieldposition + 6);
                        }
                        //NBP DIA 0x4A06
                        Fieldposition = FindField(recv_Data, 0x4A, 0x06);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            dia_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (dia_effective)
                                DIA = (int)getFloat(recv_Data, Fieldposition + 6);
                        }
                        //NBP MAP 0x4A07
                        Fieldposition = FindField(recv_Data, 0x4A, 0x07);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            map_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (map_effective)
                                MAP = (int)getFloat(recv_Data, Fieldposition + 6);
                        }

                        //CVP SYS 0x4A45
                        Fieldposition = FindField(recv_Data, 0x4A, 0x45);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            CVP_sys_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (CVP_sys_effective)
                                CVP_SYS = (int)getFloat(recv_Data, Fieldposition + 6);
                        }
                        //CVP DIA 0x4A46
                        Fieldposition = FindField(recv_Data, 0x4A, 0x46);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            CVP_dia_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (CVP_dia_effective)
                                CVP_DIA = (int)getFloat(recv_Data, Fieldposition + 6);
                        }
                        //NBP MAP 0x4A47
                        Fieldposition = FindField(recv_Data, 0x4A, 0x47);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            CVP_map_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (CVP_map_effective)
                                CVP_MAP = (int)getFloat(recv_Data, Fieldposition + 6);
                        }


                        //ABP SYS 0x4A15
                        Fieldposition = FindField(recv_Data, 0x4A, 0x15);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            ABP_sys_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (ABP_sys_effective)
                                ABP_SYS = (int)getFloat(recv_Data, Fieldposition + 6);
                        }
                        //ABP DIA 0x4A16
                        Fieldposition = FindField(recv_Data, 0x4A, 0x16);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            ABP_dia_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (ABP_dia_effective)
                                ABP_DIA = (int)getFloat(recv_Data, Fieldposition + 6);
                        }
                        //ABP MAP 0x4A17
                        Fieldposition = FindField(recv_Data, 0x4A, 0x17);
                        if (Fieldposition > 0)
                        {
                            physio_id = recv_Data[Fieldposition] * 256 + recv_Data[Fieldposition + 1];
                            ABP_map_effective = recv_Data[Fieldposition + 2] == 0 ? true : false;
                            if (ABP_map_effective)
                                ABP_MAP = (int)getFloat(recv_Data, Fieldposition + 6);
                        }


                        // Measure time 0x0990
                        Fieldposition = FindField(recv_Data, 0x09, 0x90);//Attribute ID: Absolute Time Stamp NOM_ATTR_TIME_STAMP_ABS
                        //                      if (recv_Data[contemp3] == 0x09 && recv_Data[contemp3 + 1] == 0x90)//Attribute ID: Absolute Time Stamp NOM_ATTR_TIME_STAMP_ABS
                        if (Fieldposition > 0)
                        { //时间字段  BCD格式， 需要转化为十进制
                            contemp4 = Fieldposition + 4;

                            byte century = recv_Data[contemp4];
                            int century_dec = century / 16 * 10 + century % 16;
                            byte year = recv_Data[contemp4 + 1];
                            int year_dec = year / 16 * 10 + year % 16 + century_dec * 100;
                            byte month = recv_Data[contemp4 + 2];
                            int month_dec = month / 16 * 10 + month % 16;
                            byte day = recv_Data[contemp4 + 3];
                            int day_dec = day / 16 * 10 + day % 16;
                            byte hour = recv_Data[contemp4 + 4];
                            int hour_dec = hour / 16 * 10 + hour % 16;
                            byte minute = recv_Data[contemp4 + 5];
                            int minute_dec = minute / 16 * 10 + minute % 16;
                            byte second = recv_Data[contemp4 + 6];
                            int second_dec = second / 16 * 10 + second % 16;
                            byte sec_fractions = recv_Data[contemp4 + 7];
                            int sec_fractions_dec = sec_fractions / 16 * 10 + sec_fractions % 16;
                            MeasureDate = new DateTime(year_dec, month_dec, day_dec, hour_dec, minute_dec, second_dec);

                        } 
                        this.Invoke(d);


                        HasEffectiveData = hr_effective || rr_effective || pr_effective || temp_effective || spo2_effective || sys_effective || dia_effective || map_effective || CVP_map_effective || ABP_map_effective;
                        HasEffectivePressure = map_effective || CVP_map_effective || ABP_map_effective;

                        logstr = "HR=" + HR.ToString() + ";RR=" + RR.ToString() + ";SPO2=" + SPO2.ToString() + ";sys=" + SYS.ToString() + ";DIA=" + DIA.ToString() + ";MAP=" + MAP.ToString() + ";CVP_MAP=" + CVP_MAP.ToString() + ";ABP_MAP=" + ABP_MAP.ToString();
                        SaveLog(logstr);
                        
                    }

/*                    if (recv_Length > 0 && recv_Data[4] == 0x00 && recv_Data[5] == 0x02)  //第一条消息收到，有后续存在的消息要接收， 第二次接受
                    {
                        //第二个消息字符串， 里面有几个字节， 但是是空的
                       // Thread.Sleep(Waiting_Period);
                        recv_Length = server.ReceiveFrom(recv_Data, ref phillip);
                        logstr = "Received single pool ext response2: " + BitConverter.ToString(recv_Data, 0, recv_Length).Replace("-", ",0x");
                        SaveLog(logstr);
                    }

                    if (recv_Length > 0 && recv_Data[4] == 0x00 && recv_Data[5] == 0x02)  //准备接受最后一个消息内容。
                    {
                        //接受第三个消息字符串， 里面有几个字节， 但是没有什么内容，不予处理
                        //Thread.Sleep(Waiting_Period);
                        recv_Length = server.ReceiveFrom(recv_Data, ref phillip);
                        logstr = "Received single pool ext response3: " + BitConverter.ToString(recv_Data, 0, recv_Length).Replace("-", ",0x");
                        SaveLog(logstr);
                    }*/
                } //End While
                if (HasEffectiveData)
                {

                    //  System.DateTime currentTime = new System.DateTime();
                    //  currentTime = System.DateTime.Now;


                    PatientDataBlock PatientData;


                    PatientData.MeasureTime = MeasureDate;
                    PatientData.PR = PR; PatientData.pr_effective = pr_effective;    //脉率
                    PatientData.RR = RR; PatientData.rr_effective = rr_effective;    //呼吸频率
                    PatientData.awRR = awRR; PatientData.awrr_effective = awrr_effective;    //aw呼吸频率
                    PatientData.ETCO2 = ETCO2; PatientData.etco2_effective = etco2_effective;    //PACO2 = ETCO2??
                    PatientData.SPO2 = SPO2; PatientData.spo2_effective = spo2_effective;//血氧饱和度
                    PatientData.TEMP = TEMP; PatientData.temp_effective = temp_effective;//温度
                    PatientData.HR = HR; PatientData.hr_effective = hr_effective;    //心率
                    PatientData.SYS = SYS; PatientData.sys_effective = sys_effective; //收缩压
                    PatientData.DIA = DIA; PatientData.dia_effective = dia_effective; //舒张压
                    PatientData.MAP = MAP; PatientData.map_effective = map_effective; //平均血压
                    PatientData.CVP_SYS = CVP_SYS; PatientData.CVP_sys_effective = CVP_sys_effective; //中心静脉收缩压
                    PatientData.CVP_DIA = CVP_DIA; PatientData.CVP_dia_effective = CVP_dia_effective; //中心静脉舒张压
                    PatientData.CVP_MAP = CVP_MAP; PatientData.CVP_map_effective = CVP_map_effective; //中心静脉平均血压
                    PatientData.ABP_SYS = ABP_SYS; PatientData.ABP_sys_effective = ABP_sys_effective; //动脉收缩压
                    PatientData.ABP_DIA = ABP_DIA; PatientData.ABP_dia_effective = ABP_dia_effective; //动脉舒张压
                    PatientData.ABP_MAP = ABP_MAP; PatientData.ABP_map_effective = ABP_map_effective; //动脉平均血压

                    logstr = "Final Saved Data: Time=" + MeasureDate.ToString("yyyy-MM-dd HH:mm:ss") + ";HR=" + HR.ToString() + ";RR=" + RR.ToString() +  ";awRR=" + awRR.ToString() + ";ETCO2=" + ETCO2.ToString()+";SPO2=" + SPO2.ToString() + ";sys=" + SYS.ToString() + ";DIA=" + DIA.ToString() + ";MAP=" + MAP.ToString() + ";CVP_MAP=" + CVP_MAP.ToString() + ";ABP_MAP=" + ABP_MAP.ToString();
                    //string logstr = "HR=" + HR.ToString() + ";RR=" + RR.ToString() + ";awRR=" + awRR.ToString() + ";ETCO2=" + ETCO2.ToString() + ";SPO2=" + SPO2.ToString() + ";sys=" + SYS.ToString() + ";DIA=" + DIA.ToString() + ";MAP=" + MAP.ToString() + ";CVP_MAP=" + CVP_MAP.ToString() + ";ABP_MAP=" + ABP_MAP.ToString();
                    SaveLog(logstr);
                    SaveData(PatientData);

                }
                Byte[] Associate_Release_Request = new Byte[]
             {
                 0x09, 0x18, 
                 0xC1, 0x16, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01,
                 0x01, 0xA0, 0x80, 0x62, 0x80, 0x80, 0x01, 0x00,
                 0x00, 0x00, 0x00, 0x00,
                 0x00, 0x00, 0x00, 0x00
              };
                server.SendTo(Associate_Release_Request, 26, SocketFlags.None, phillip_server);

                logstr = "Send Associate Release Request: " + BitConverter.ToString(Associate_Release_Request).Replace("-", ",0x");
                SaveLog(logstr);
               // Thread.Sleep(Waiting_Period);
                recv_Length = server.ReceiveFrom(recv_Data, ref phillip);
                logstr = "Received Associate Release Result: " + BitConverter.ToString(recv_Data, 0, recv_Length).Replace("-", ",0x");
                SaveLog(logstr);

                Byte[] Associate_Release_Response = new Byte[]
             {
                 0x0A, 0x18, 

                 0xC1, 0x16, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01,
                 0x01, 0xA0, 0x80, 0x63, 0x80, 0x80, 0x01, 0x00,
                 0x00, 0x00, 0x00, 0x00,
                 0x00, 0x00, 0x00, 0x00
              };

                Byte[] Associate_Abort = new Byte[]
             {
                 0x19, 0x2E,
                 0x11, 0x01, 0x03,
                 0xC1, 0x29, 0xA0, 0x80, 0xA0, 0x80, 0x30, 0x80,
                 0x02, 0x01, 0x01, 0x06, 0x02, 0x51, 0x01, 0x00,
                 0x00, 0x00, 0x00, 0x61, 0x80, 0x30, 0x80, 0x02,
                 0x01, 0x01, 0xA0, 0x80, 0x64, 0x80, 0x80, 0x01,
                 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 0x00, 0x00, 0x00, 0x00
              };
                if (recv_Data[0] == Associate_Release_Response[0] && recv_Data[1] == Associate_Release_Response[1])
                {
                    //Received correct release Response
                    //MessageBox.Show("连接正确退出！");
                }
                else if (recv_Data[0] == Associate_Abort[0] && recv_Data[1] == Associate_Abort[1])
                {
                    // Associate_Abort
                    MessageBox.Show("收到连接中断消息！");
                }
                else
                {
                    //收到无法识别的消息

                    MessageBox.Show("收到无法识别消息！");
                }
                Thread.Sleep(Get_Period);
                GetDataTimes++;
            }
        }